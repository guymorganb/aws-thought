{"ast":null,"code":"var _jsxFileName = \"/Users/guymorganb/Desktop/GitHub_Repos/AWS/starter/client/src/components/ThoughtForm/index.js\";\nimport React, { useState, useRef } from 'react';\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    thought: \"\"\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n  const fileInput = useRef(null);\n  // update state based on form input changes\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setFormState({\n        ...formState,\n        [event.target.name]: event.target.value\n      });\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // we declare the handleImageLoad function. We assigned this function to invoke when the user selects the Upload button for the <input type=\"file\"> element. \n  // We want this function to retrieve the image file uploaded by the user and send this data in a request to the image upload endpoint that we created previously.\n  const handleImageUpload = event => {\n    event.preventDefault();\n    const data = new FormData();\n    data.append('image', fileInput.current.files[0]);\n    // send image file to endpoint with the postImage function\n    // Because the image upload process to S3 is an asynchronous request that will take some time, \n    // it's possible to submit the form before the response from the image upload process is returned. \n    // This will submit a null as the value of the image URL. \n    // To prevent this, we can add a progress bar or disable the form submit button while the image is processing.\n    // Next, declare an interface object from FormData, called data. FormData makes it easy to construct a set of key-value pairs, \n    // mirroring the format of a form with the type set to \"multipart/form-data\".\n  };\n  // submit form\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const postData = async () => {\n      const res = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formState)\n      });\n      const data = await res.json();\n      console.log(data);\n    };\n    postData();\n\n    // clear form value\n    setFormState({\n      username: \"\",\n      thought: \"\"\n    });\n    setCharacterCount(0);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: `m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Character Count: \", characterCount, \"/280\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"flex-row justify-center justify-space-between-md align-stretch\",\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Name\",\n    name: \"username\",\n    value: formState.username,\n    className: \"form-input col-12 \",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"Here's a new thought...\",\n    name: \"thought\",\n    value: formState.thought,\n    className: \"form-input col-12 \",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-input col-12 p-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Add an image to your thought:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    ref: fileInput // make sure fileInput is properly defined\n    ,\n    className: \"form-input p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: handleImageUpload // make sure handleImageUpload is properly defined\n    ,\n    type: \"button\" // use type button to avoid form submission\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Upload\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn col-12 \",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\nexport default ThoughtForm;","map":{"version":3,"names":["React","useState","useRef","ThoughtForm","formState","setFormState","username","thought","characterCount","setCharacterCount","fileInput","handleChange","event","target","value","length","name","handleImageUpload","preventDefault","data","FormData","append","current","files","handleFormSubmit","postData","res","fetch","method","headers","Accept","body","JSON","stringify","json","console","log","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","placeholder","onChange","type","ref","onClick"],"sources":["/Users/guymorganb/Desktop/GitHub_Repos/AWS/starter/client/src/components/ThoughtForm/index.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    thought: \"\",\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n  const fileInput = useRef(null);\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setFormState({ ...formState, [event.target.name]: event.target.value });\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // we declare the handleImageLoad function. We assigned this function to invoke when the user selects the Upload button for the <input type=\"file\"> element. \n  // We want this function to retrieve the image file uploaded by the user and send this data in a request to the image upload endpoint that we created previously.\n  const handleImageUpload = (event) => {\n    event.preventDefault();\n    const data = new FormData();\n    data.append('image', fileInput.current.files[0]);\n    // send image file to endpoint with the postImage function\n    // Because the image upload process to S3 is an asynchronous request that will take some time, \n    // it's possible to submit the form before the response from the image upload process is returned. \n    // This will submit a null as the value of the image URL. \n    // To prevent this, we can add a progress bar or disable the form submit button while the image is processing.\n    // Next, declare an interface object from FormData, called data. FormData makes it easy to construct a set of key-value pairs, \n    // mirroring the format of a form with the type set to \"multipart/form-data\".\n  };\n  // submit form\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const postData = async () => {\n      const res = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formState),\n      });\n      const data = await res.json();\n      console.log(data);\n    };\n    postData();\n    \n    // clear form value\n    setFormState({ username: \"\", thought: \"\" });\n    setCharacterCount(0);\n  };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`}>\n        Character Count: {characterCount}/280\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <input\n          placeholder=\"Name\"\n          name=\"username\"\n          value={formState.username}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></input>\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          name=\"thought\"\n          value={formState.thought}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></textarea>\n  \n        {/* Image upload section */}\n        <label className=\"form-input col-12 p-1\">\n          Add an image to your thought:\n          <input\n            type=\"file\"\n            ref={fileInput} // make sure fileInput is properly defined\n            className=\"form-input p-2\"\n          />\n          <button\n            className=\"btn\"\n            onClick={handleImageUpload} // make sure handleImageUpload is properly defined\n            type=\"button\" // use type button to avoid form submission\n          >\n            Upload\n          </button>\n        </label>\n  \n        <button className=\"btn col-12 \" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n  \n};\n\nexport default ThoughtForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}